import streamlit as st
from core import (
    fetch_and_store_single,
    simulate_admission,
    export_to_excel,
    lookup_reg_number,
    get_connection,
    ID_LIST
)
import pandas as pd
import os
import sqlite3
from datetime import datetime


st.set_page_config(page_title="–ú–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", layout="wide")
st.title("üéì –ú–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä: –æ—Ü–µ–Ω–∏ —Å–≤–æ–∏ —à–∞–Ω—Å—ã –Ω–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ")

st.markdown("""
–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç:
- –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö –≤ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—É —Å —Å–∞–π—Ç–∞ –Æ–£—Ä–ì–£
- –°–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞ –±—é–¥–∂–µ—Ç –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –±–∞–ª–ª–∞–º

**–®–∞–≥–∏:**
1. –ù–∞–∂–º–∏—Ç–µ ¬´üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ¬ª (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
2. –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ ‚Äî ¬´‚úÖ –°–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ¬ª
3. –°–∫–∞—á–∞–π—Ç–µ Excel-—Ñ–∞–π–ª –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞ –ø–æ –µ–≥–æ –°–ù–ò–õ–°
            
‚ö† –í–ê–ñ–ù–û: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ —Å–ø–∏—Å–∫–∏ –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö –Ω–∞ –±—é–¥–∂–µ—Ç.
–£—á—ë—Ç –±–∞–∫–∞–ª–∞–≤—Ä–æ–≤, –∞—Å–ø–∏—Ä–∞–Ω—Ç–æ–≤ –∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–Ω–∏–∫–æ–≤ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–∑–∂–µ.
            
**–ê–≤—Ç–æ—Ä:** [–ï–≥–æ—Ä](https://t.me/yetanothercreativeusername)
            
**–ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å —Ä—É–±–ª—ë–º:** [–¢–∏–Ω—å–∫–æ—Ñ—Ñ](https://www.tinkoff.ru/rm/r_omVCvObggH.qSLGCbPrSM/S2bsI15773)
""")

if "data_loaded" not in st.session_state:
    try:
        conn = sqlite3.connect("abit.db")
        cur = conn.cursor()
        cur.execute("CREATE TABLE IF NOT EXISTS metadata (key TEXT PRIMARY KEY, value TEXT)")
        cur.execute("SELECT name FROM sqlite_master WHERE type='table' AND name LIKE 'applicants_%'")
        has_tables = bool(cur.fetchall())
        cur.execute("SELECT value FROM metadata WHERE key = 'last_updated'")
        row = cur.fetchone()
        conn.close()

        st.session_state.data_loaded = has_tables
        st.session_state.last_updated = row[0] if row else None
    except Exception:
        st.session_state.data_loaded = False
        st.session_state.last_updated = None

if "last_excel_path" not in st.session_state:
    st.session_state.last_excel_path = None

def load_cached_data():
    conn = get_connection()
    places = {}
    names = {}
    times = {}

    cur = conn.cursor()

    for direction_id in ID_LIST:
        table = f"applicants_{direction_id}"
        try:
            cur.execute(f"SELECT COUNT(*) FROM {table}")
            if cur.fetchone()[0] == 0:
                continue

            cur.execute("SELECT value FROM metadata WHERE key = ?", (f"name_{direction_id}",))
            raw = cur.fetchone()
            names[direction_id] = raw[0] if raw else f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {direction_id}"

            cur.execute("SELECT value FROM metadata WHERE key = ?", (f"time_{direction_id}",))
            raw = cur.fetchone()
            times[direction_id] = raw[0] if raw else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            cur.execute("SELECT value FROM metadata WHERE key = ?", (f"places_{direction_id}",))
            raw = cur.fetchone()
            places[direction_id] = int(raw[0]) if raw else 10

        except:
            continue

    conn.close()
    return places, names, times

if st.session_state.data_loaded:
    if "places" not in st.session_state:
        places, names, times = load_cached_data()
        st.session_state.places = places
        st.session_state.names = names
        st.session_state.times = times
        st.session_state.failures = []
    st.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {st.session_state.last_updated}")
else:
    st.warning("‚ö† –î–∞–Ω–Ω—ã–µ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.")

if st.session_state.data_loaded:
    if st.button("üóë –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"):
        try:
            os.remove("abit.db")
            st.session_state.data_loaded = False
            st.session_state.last_updated = None
            st.success("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞.")
        except Exception as e:
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")

tab1, tab2 = st.tabs(["üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–∏–º—É–ª—è—Ü–∏—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è", "üîç –ü–æ–∏—Å–∫ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞ –ø–æ –°–ù–ò–õ–°"])

with tab1:
    st.subheader("üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∏ —Å–∏–º—É–ª—è—Ü–∏—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è")

    if st.button("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ"):
        with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º..."):
            progress_text = st.empty()
            progress_bar = st.progress(0)

            total = len(ID_LIST)
            places = {}
            names = {}
            times = {}
            failures = []

            for i, direction_id in enumerate(ID_LIST):
                progress_text.text(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è ID {direction_id} ({i + 1}/{total})")
                result = fetch_and_store_single(direction_id)
                if result:
                    p, n, t = result
                    places[direction_id] = p
                    names[direction_id] = n
                    times[direction_id] = t
                else:
                    failures.append(direction_id)
                progress_bar.progress((i + 1) / total)

            st.session_state.places = places
            st.session_state.names = names
            st.session_state.times = times
            st.session_state.failures = failures
            st.session_state.data_loaded = True
            st.session_state.last_updated = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            try:
                conn = sqlite3.connect("abit.db")
                cur = conn.cursor()
                cur.execute("REPLACE INTO metadata (key, value) VALUES (?, ?)", ("last_updated", st.session_state.last_updated))
                for direction_id in ID_LIST:
                    cur.execute("REPLACE INTO metadata (key, value) VALUES (?, ?)", (f"places_{direction_id}", str(places.get(direction_id, 10))))
                conn.commit()
                conn.close()
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

        st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        if failures:
            st.warning(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {failures}")

    if st.session_state.data_loaded and st.button("‚úÖ –°–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ"):
        with st.spinner("–°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ..."):
            admitted = simulate_admission(st.session_state.places)
            excel_path = export_to_excel(admitted, st.session_state.names, st.session_state.times)
            st.session_state.last_excel_path = excel_path
            st.success("üéâ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

            if os.path.exists(excel_path):
                with open(excel_path, "rb") as f:
                    st.download_button(
                        "üì• –°–∫–∞—á–∞—Ç—å Excel-—Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏",
                        f,
                        file_name=os.path.basename(excel_path),
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )

            for direction_id, entries in admitted.items():
                st.subheader(f"{direction_id} ‚Äî {st.session_state.names.get(direction_id)}")
                df = pd.DataFrame(entries, columns=["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä", "–ë–∞–ª–ª—ã", "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç"])
                df.index += 1
                df.index.name = "–ú–µ—Å—Ç–æ"
                st.dataframe(df, use_container_width=True)

with tab2:
    st.subheader("üîç –ü–æ–∏—Å–∫ –ø–æ –°–ù–ò–õ–°")

    reg_input = st.text_input("–£–∫–∞–∂–∏—Ç–µ –°–ù–ò–õ–°:")

    if st.button("üîé –ù–∞–π—Ç–∏"):
        if not st.session_state.get("data_loaded"):
            st.warning("‚ö† –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –Ω–∞ –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–µ.")
        elif not reg_input.strip():
            st.error("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –°–ù–ò–õ–°.")
        else:
            with st.spinner("–ò—â–µ–º..."):
                results = lookup_reg_number(reg_input.strip())
                if results:
                    df = pd.DataFrame(results)
                    df = df.rename(columns={
                        "direction_id": "ID –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
                        "position": "–ü–æ–∑–∏—Ü–∏—è",
                        "reg_number": "–†–µ–≥. –Ω–æ–º–µ—Ä",
                        "total_score": "–ë–∞–ª–ª—ã (–æ–±—â–∏–µ)",
                        "individual_achievements": "–ë–∞–ª–ª—ã (–ò–î)",
                        "has_originals": "–û—Ä–∏–≥–∏–Ω–∞–ª",
                        "priority": "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç"
                    })
                    df.index += 1
                    df.index.name = "–ù–∞–π–¥–µ–Ω–æ"
                    st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {len(df)}")
                    st.dataframe(df, use_container_width=True)
                else:
                    st.info("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –¥–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É.")
